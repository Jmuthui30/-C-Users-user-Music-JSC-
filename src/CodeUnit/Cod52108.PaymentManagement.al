codeunit 52108 "Payment Management"
{
    var Request: Record "Request for Payment";
    RequestLines: Record "Request for Payment Lines";
    PurchInvoice: Record "Purch. Inv. Header";
    PV: Record "PV Header";
    BeneficiaryBanks: Record "Payee Bank Details";
    PVLines: Record "PV Lines";
    ITO: Record "Imprest Header";
    Window: Dialog;
    Names: Text;
    Counter: Integer;
    Text001: Label 'You are about to create a Payment Voucher for this Request. Do you wish to continue?';
    Text002: Label 'This request %1  has not been approved';
    Text003: Label 'PV No. %1 was already generated for this Request.';
    Text004: Label 'Are you sure you want to process Payment request for %1?';
    Text005: Label 'The document %1 has been requested for Payment.';
    Text006: Label 'Payment request has been made Successfully!';
    Text007: Label 'There is nothing to review!';
    procedure CreatePVforRequestForPayment(var Request: Record "Request for Payment")
    var
        RPLines: Record "Request for Payment Lines";
        LineNo: Integer;
    begin
        // if Confirm(Text001, false) = true then begin
        if Request.Status <> Request.Status::Released then Error(Text002, Request."No.");
        Request.TestField("Creditor No.");
        if Request."PV Generated" then Error(Text003, Request."PV No.");
        //PV Header
        PV.Init;
        PV."Payment Type":=PV."Payment Type"::"Payment Voucher";
        PV.Status:=PV.Status::Open;
        PV.Date:=Today;
        PV.Cashier:=UserId;
        BeneficiaryBanks.Reset;
        BeneficiaryBanks.SetRange("FULL BEN NAME", Request."Name of Creditor" + '(' + Request."No." + ')');
        if BeneficiaryBanks.FindFirst()then begin
            PV."Ben ID":=BeneficiaryBanks."BEN ID";
            PV.Validate(Payee, BeneficiaryBanks."BENEFICIARY NAME");
            PV."Payee Account Name":=BeneficiaryBanks."FULL BEN NAME";
            PV."Payee Account No.":=BeneficiaryBanks."BEN ACCT NO";
            PV."Payee Bank Code":=BeneficiaryBanks."BANK CODE";
            PV."Payee Bank":=BeneficiaryBanks.BANKNAME;
            PV."Branch Code":=BeneficiaryBanks."BRANCH CODE";
            PV."Branch Name":=BeneficiaryBanks."BRANCH NAME";
            PV."Sort Code":=BeneficiaryBanks."BC.SORT.CODE";
        end
        else
            PV.Payee:=Request."Name of Creditor" + '(' + Request."No." + ')';
        PV.Insert(true);
        //Lines
        LineNo:=10000;
        RPLines.Reset;
        RPLines.SetRange("No.", Request."No.");
        if RPLines.FindSet then begin
            repeat PVLines.Init;
                PVLines.No:=PV."No.";
                PVLines."Line No":=LineNo;
                if RPLines."Source Document" = RPLines."Source Document"::"Travel Order" then PVLines."Account Type":=PVLines."Account Type"::Customer
                else
                    PVLines."Account Type":=PVLines."Account Type"::Vendor;
                PVLines.Validate("Account No", RPLines."Creditor No.");
                PVLines."Account Name":=RPLines."Name of Creditor";
                if Request."Source Document" = Request."Source Document"::"Supplier Invoice" then PVLines.Validate("Applies to Doc. No", RPLines."Source Document No.");
                PVLines.Description:=RPLines."Being Payment for";
                PVLines.Validate("Currency Code", RPLines."Currency Code");
                PVLines.Validate(Amount, RPLines.Amount);
                PVLines.Validate("Purchase Invoice Amount", RPLines."Purchase Invoice Amount");
                PVLines.Validate("Outstanding Amount", RPLines."Outstanding Amount");
                PVLines."Purchase Invoice Amount":=RPLines."Purchase Invoice Amount";
                PVLines."Global Dimension 1 Code":=RPLines."Global Dimension 1 Code";
                PVLines."Global Dimension 2 Code":=RPLines."Global Dimension 2 Code";
                PVLines.Insert(true);
                LineNo:=LineNo + 1000;
                if RPLines."Source Document" = RPLines."Source Document"::"Travel Order" then begin
                    if ITO.Get(RPLines."Source Document No.")then begin
                        ITO."Request Posted":=true;
                        ITO."Request Posted By":=UserId;
                        ITO."Request Posted Date":=Today;
                        ITO.Type:=ITO.Type::Surrender;
                        ITO.Modify;
                    end;
                end;
            until RPLines.Next = 0;
        end
        else
            Error('The Request has been marked as Split Payment but there are not split details.');
        Request."PV No.":=PV."No.";
        Request."PV Generated":=true;
        Request."PV Generated By":=UserId;
        Request."PV Generated Date":=CurrentDateTime;
        Request.Modify;
        Message('Payment Voucher Number %1 has been created for this Request.', PV."No.");
        PAGE.Run(Page::"Payment Request", PV);
    end;
    procedure ViewPVForRequestForPayment(var Request: Record "Request for Payment")
    var
        FormerPVNo: Code[20];
        LatterPVNo: Code[20];
    begin
        PV.Reset;
        PV.SetRange("No.", Request."PV No.");
        if PV.FindFirst then begin
            PAGE.RunModal(50028, PV, PV."No.");
        end;
    end;
    procedure InvoicePaymentRequest(Var Invoice: Record "Purch. Inv. Header")
    var
        PurchInv: Record "Purch. Inv. Header";
    begin
        if Confirm(StrSubstNo(Text004, Invoice."No."), false) = true then begin
            if Invoice."Payment Requested" then Error(StrSubstNo(Text005, Invoice."No."));
            PurchInv.Reset();
            PurchInv.SetRange("No.", Invoice."No.");
            PurchInv.SetRange("Payment Requested", false);
            if PurchInv.FindFirst()then begin
                PurchInv.Decision:=PurchInv.Decision::NEW;
                if PAGE.RunModal(PAGE::"Payment Request Review", PurchInv) = ACTION::LookupOK then begin
                    PurchInv.TestField(Decision);
                    if PurchInv.Decision = PurchInv.Decision::Append then PurchInv.TestField(Target);
                    PurchInv.TestField("Amount To Request");
                    ExecutePaymentRequestReview(true, PurchInv."No.");
                    Message(Text006);
                end
                else
                begin
                    exit;
                end;
            end;
            Commit;
        end;
    end;
    procedure ExecutePaymentRequestReview(SingleExecute: Boolean; InvoiceNo: Code[20])
    begin
        Counter:=0;
        Names:='';
        Window.Open('Processing Payment Request Review #####1 for #####2', Counter, Names);
        PurchInvoice.Reset();
        if SingleExecute then PurchInvoice.SetRange("No.", InvoiceNo);
        PurchInvoice.SetRange("Payment Requested", false);
        PurchInvoice.SetFilter(Decision, '<>%1', PurchInvoice.Decision::" ");
        PurchInvoice.SetRange("Decision By", UserId);
        PurchInvoice.SetFilter("Amount To Request", '<>%1', 0);
        If PurchInvoice.Find('-')then begin
            repeat Counter:=Counter + 1;
                if PurchInvoice.Decision = PurchInvoice.Decision::New then CreateRequestForInvoice(PurchInvoice);
                if((PurchInvoice.Decision = PurchInvoice.Decision::"Append") and (PurchInvoice.Target <> ''))then AppendInvoiceToPaymentRequest(PurchInvoice);
                Window.Update(1, Counter);
                Window.Update(2, PurchInvoice."Buy-from Vendor Name");
                Sleep(50);
            until PurchInvoice.Next = 0;
            Message(Text006);
            Window.Close();
        end
        else
            Error(Text007);
    end;
    local procedure AppendInvoiceToPaymentRequest(var Invoice: Record "Purch. Inv. Header")
    var
        LineCount: Integer;
        LineNo: Integer;
    begin
        //Request For Payment
        Request.Reset();
        Request.SetRange("No.", Invoice.Target);
        If Request.FindFirst()then begin
            RequestLines.Reset();
            RequestLines.SetRange("No.", Request."No.");
            LineCount:=RequestLines.Count + 1;
            LineNo:=LineCount * 1000;
            CreatePaymentRequestLines(Request, Invoice, LineNo);
        end;
    end;
    local procedure CreateRequestForInvoice(var Invoice: Record "Purch. Inv. Header")
    var
        Payment: Record "Request for Payment";
    begin
        //Request For Payment
        Payment.Init;
        Payment."Source Document":=Payment."Source Document"::"Supplier Invoice";
        Payment.Validate("Creditor No.", Invoice."Buy-from Vendor No.");
        Payment.Status:=Payment.Status::Released;
        Payment.Insert(true);
        Commit;
        CreatePaymentRequestLines(Payment, Invoice, 1000);
    end;
    local procedure CreatePaymentRequestLines(var PaymentRequest: Record "Request for Payment"; PurchInvHeader: Record "Purch. Inv. Header"; LineNo: Integer)
    begin
        RequestLines.Init;
        RequestLines."No.":=PaymentRequest."No.";
        RequestLines."Line No.":=LineNo;
        RequestLines."Source Document":=RequestLines."Source Document"::"Supplier Invoice";
        RequestLines.Validate("Source Document No.", PurchInvHeader."No.");
        RequestLines.Validate("Creditor No.", PurchInvHeader."Buy-from Vendor No.");
        RequestLines."Invoice No.":=PurchInvHeader."Vendor Invoice No.";
        RequestLines."Currency Code":=PurchInvHeader."Currency Code";
        RequestLines."Global Dimension 1 Code":=PurchInvHeader."Shortcut Dimension 1 Code";
        RequestLines."Global Dimension 2 Code":=PurchInvHeader."Shortcut Dimension 2 Code";
        RequestLines."Being Payment for":=PurchInvHeader."Posting Description";
        RequestLines.Amount:=PurchInvHeader."Amount To Request";
        PurchInvHeader.CalcFields(Amount, "Remaining Amount");
        RequestLines."Purchase Invoice Amount":=PurchInvHeader.Amount;
        RequestLines."Outstanding Amount":=PurchInvHeader."Remaining Amount";
        RequestLines.Insert(true);
        PaymentRequest.Status:=PaymentRequest.Status::Released;
        PaymentRequest.Modify(true);
        CreatePVforRequestForPayment(PaymentRequest);
        PurchInvHeader."Amount Remaining To Request":=PurchInvHeader."Amount Remaining To Request" - PurchInvHeader."Amount To Request";
        PurchInvHeader."Amount To Request":=0;
        if PurchInvHeader."Amount Remaining To Request" <> 0 then begin
            PurchInvHeader."Partial Payment Request":=true;
            PurchInvHeader."Payment Requested":=false;
        end
        else
            PurchInvHeader."Payment Requested":=true;
        PurchInvHeader.Modify(true);
    end;
}
